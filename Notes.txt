- VS Code extensions:
    - Make Apps Theme
    - Material Icon Theme
    - Vue Volar extension Pack
    - Split HTML Attributes
	- Duplicate action

- Add project to git:
git remote add origin https://github.com/tankoi/vue-composition-api-basics.git
git branch -M main
git push -u origin main

- Options API
export default {
  data() {
    return {
      counter: 0
    }
  },
  methods: {
    decreaseCounter() {
      this.counter--;
    },
    increaseCounter() {
      this.counter++;
    }
  }
}

- Composition API
<script setup>
import { ref, reactive } from 'vue'

const counter = ref(0),
      counterTitle = ref('My Counter')

const increaseCounter = () => {
  counter.value++
}

const decreaseCounter = () => {
  counter.value--
}
</script>

- Use `reactive` for objects and `ref` for others

- Passing the event arguments: 
<button @click="increaseCounter(1, $event)" class="btn">+</button>
...
const increaseCounter = (amount, e) => {
  console.log(e);
  counterData.count += amount
}

- Computed variable:
const oddOrEven = computed(() => {
    if (counterData.count % 2 === 0) return 'even'
    return 'odd'
})

- Property wathcer:
watch(() => counterData.count, (newCount, oldCount) => {
  console.log('newCount', newCount)
})

- Mounted Hooks
onBeforeMount(() => {
  console.log('onBeforeMount')
})
onMounted(() => {
  console.log('onMount')
})
onBeforeUnmount(() => {
  console.log('onBeforeUnmount')
})
onUnmounted(() => {
  console.log('onUnmounted')
})
onActivated(() => {
  console.log('onActivated')
})
onDeactivated(() => {
  console.log('onDeactivated')
})

- Local custom directives
const vAutofocus = {    // v-autofocus
  mounted: (el) => {
    el.focus()
  }
}

- NextTick (it is an async method)
const increaseCounter = async (amount, e) => {
	counterData.count += amount
  	await nextTick()
	console.log('do something when counter has been updated in the dom');
}

- Slots
<Modal v-if="showModal">
  <template v-slot:title>My new title</template>
  <!-- or: <template #title>My new title</template> -->
  <p>Lorem ipsum ...</p>
</Modal>

// child component:
<div class="modal">
  <h1>
    <slot name="title"/>
  </h1>
  <slot/>
  <button>Hide modal</button>
</div>

-- use slots in script:
import { useSlots } from 'vue'

const slots = useSlots()

- Props
const props = defineProps(['title'])
or
const props = defineProps({
  title: {
    type: String,
    default: 'No title specified'
  }
})

- Emits
const handleButtonClick = () => {
  emit('hideModal')
}

- Dynamic component
<component 
  v-model="showModal"
  :is="showDarkModals ? ModalDark : Modal"
  title="My modal title (via prop)"
>
  <p>Lorem ipsum ...</p>
</component>

- Provide/inject - send data from parent to all child components 
-- parent:
provide('userData', userData)

-- grandchild:
const userData = inject('userData')

- Composable (like mixins in VueJS 2)
import { useCounter} from '@/use/useCounter'

const {counterData, increaseCounter} = useCounter();
<button
  @click="increaseCounter(1)"
  class="counter-button"
>
  {{counterData.count}}
</button>

-- vue library: vueuse.org

- 